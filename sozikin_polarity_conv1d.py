# -*- coding: utf-8 -*-
"""Copy of urfu_dl_yelp_polarity_conv1D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5yua7GIBEQWXTAgxwnfj9D5_wttpT4U
"""

# Commented out IPython magic to ensure Python compatibility.
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, MaxPooling1D, Conv1D, GlobalMaxPooling1D, Dropout
from tensorflow.keras import utils
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.callbacks import ModelCheckpoint
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

num_words = 10000
max_review_len = 100


"""## Загружаем данные в память

Читаем данные из файла
"""

train = pd.read_csv('avoska_txt.csv', 
                    header=None, 
                    names=['Class', 'Review'])

train

"""Выделяем данные для обучения"""

reviews = train['Review']

reviews[:5]

"""Выделяем правильные ответы"""

y_train = train['Class']

"""# New Section"""

y_train

"""## Токенизация текста"""

reviews[:5]

"""Создаем токенизатор Keras"""

tokenizer = Tokenizer(num_words=num_words)

"""Обучаем токенизатор на отзывах Yelp"""

tokenizer.fit_on_texts(reviews)

"""Просматриваем словарь токенизатора"""

tokenizer.word_index

"""Преобразуем отзывы Yelp в числовое представление"""

sequences = tokenizer.texts_to_sequences(reviews)

"""Просматриваем отзывы в числовом представлении"""

index = 100
print(reviews[index])
print(sequences[index])

tokenizer.word_index['in']

"""Ограничиваем длину отзывов"""

x_train = pad_sequences(sequences, maxlen=max_review_len)

x_train[:5]

"""## Создаем нейронную сеть"""

model = Sequential()
model.add(Embedding(num_words, 64, input_length=max_review_len))
model.add(Conv1D(250, 5, padding='valid', activation='relu'))
model.add(GlobalMaxPooling1D())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', 
              loss='binary_crossentropy', 
              metrics=['accuracy'])

model_save_path = "models_ai/best_model.h5"
checkpoint_callback = ModelCheckpoint(model_save_path,
                                      monitor='val_accuracy',
                                      save_best_only=True,
                                      verbose=1)

model.summary()

"""## Обучаем нейронную сеть"""

history = model.fit(x_train, 
                    y_train, 
                    epochs=4,
                    batch_size=128,
                    validation_split=0.1,
                    callbacks=[checkpoint_callback])

plt.plot(history.history['accuracy'], 
         label='Доля верных ответов на обучающем наборе')
plt.plot(history.history['val_accuracy'], 
         label='Доля верных ответов на проверочном наборе')
plt.xlabel('Эпоха обучения')
plt.ylabel('Доля верных ответов')
plt.legend()
plt.show()

"""## Загружаем набор данных для тестирования"""

test = pd.read_csv('avoska_txt.csv', 
                    header=None, 
                    names=['Class', 'Review'])

test

"""Преобразуем отзывы в числовое представление

Обратите внимание, что нужно использовать токенизатор, обученный на наборе данных train.
"""

test_sequences = tokenizer.texts_to_sequences(test['Review'])

x_test = pad_sequences(test_sequences, maxlen=max_review_len)

x_test[:5]

"""Правильные ответы"""

y_test = test['Class']

y_test

"""## Оцениваем качество работы сети на тестовом наборе данных"""

model.evaluate(x_test, y_test, verbose=1)

"""## Оцениваем тональность на собственном отзыве"""

text = '''Закажи картину для мамы
'''

sequence = tokenizer.texts_to_sequences([text])

sequence

data = pad_sequences(sequence, maxlen=max_review_len)

data

result = model.predict(data)

result

if result < 0.5:
    print('Отзыв отрицательный')
else:
    print('Отзыв положительный')

"""## Задания для самостоятельной работы

Меняйте гиперпараметры нейросети, чтобы повысить качество работы:
  - Длину окна свертки (поробуйте 3, 5, 7 и 9).
  - Количество карт признаков в сверточном слое.
  - Длину вектора представления слов в слое Embedding.
  - Количество сверточных слоев.
  - Количествой нейронов в полносвязном слое для классификации.
  - Параметр Dropout
  - Тип оптимизатора (`adam`, `rmsprop` и др.)
  - Количество эпох обучения.
  - Рармер мини-выборки.


"""